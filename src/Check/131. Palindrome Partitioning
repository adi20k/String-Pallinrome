class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> strList=new ArrayList<>();

        List<String> path=new ArrayList<>();
        DFS(s,0,path,strList);
        return strList;
    }
    void DFS(String s,int index,List<String> path,List<List<String>> strList)
    {
        if(index==s.length()){
            strList.add(new ArrayList(path));
            return;
        }
        for(int i=index;i<s.length();i++){
            if(ispalindrome(s,index,i)){
                path.add(s.substring(index,i+1));
                DFS(s,i+1,path,strList);
                path.remove(path.size()-1);
            }
        }
    }

    boolean ispalindrome(String s,int l,int r){
        while (l<r){
            if(s.charAt(l)!=s.charAt(r)){
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}
